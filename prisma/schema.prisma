// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  workspaces    WorkspaceMember[]
  messages      Message[]
  reactions     Reaction[]
  channels      ChannelMember[]
  uploadedFiles File[]    @relation("UserFiles")
  sentInvites   WorkspaceInvite[] @relation("InviteSender")
}

model Workspace {
  id          String    @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  members     WorkspaceMember[]
  channels    Channel[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  invites     WorkspaceInvite[]
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  role        String    @default("MEMBER")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, workspaceId])
}

model Channel {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
  messages    Message[]
  members     ChannelMember[]
  files       File[]    @relation("ChannelFiles")

  @@unique([workspaceId, name])
}

model ChannelMember {
  id        String   @id @default(cuid())
  userId    String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, channelId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId String
  user      User     @relation(fields: [userId], references: [id])
  reactions Reaction[]
  files     File[]   @relation("MessageFiles")
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String
  messageId String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, emoji])
}

model File {
  id           String   @id @default(cuid())
  name         String
  url          String
  size         Int
  type         String
  channelId    String
  uploadedById String
  messageId    String?
  createdAt    DateTime @default(now())
  
  channel      Channel  @relation("ChannelFiles", fields: [channelId], references: [id])
  uploadedBy   User     @relation("UserFiles", fields: [uploadedById], references: [id])
  message      Message? @relation("MessageFiles", fields: [messageId], references: [id])
}

enum Role {
  ADMIN
  MEMBER
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WorkspaceInvite {
  id          String    @id @default(cuid())
  email       String
  status      String    @default("PENDING")
  workspaceId String
  invitedById String
  createdAt   DateTime  @default(now())
  
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedBy   User     @relation("InviteSender", fields: [invitedById], references: [id])

  @@unique([email, workspaceId])
}
