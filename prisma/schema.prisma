// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String           @id
  name             String?
  imageUrl         String?
  messages         Message[]
  workspaceMembers WorkspaceMember[]
  channelMembers   ChannelMember[]
  reactions        Reaction[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Workspace {
  id        String      @id @default(cuid())
  name      String
  color     String
  members   WorkspaceMember[]
  channels  Channel[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        String    @default("MEMBER") // "ADMIN" or "MEMBER"
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, workspaceId])
}

model Channel {
  id              String          @id @default(cuid())
  name            String
  workspaceId     String
  messages        Message[]
  channelMembers  ChannelMember[]
  workspace       Workspace       @relation(fields: [workspaceId], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([workspaceId])
}

model ChannelMember {
  id        String   @id @default(cuid())
  userId    String
  channelId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, channelId])
}

model Message {
  id        String     @id @default(cuid())
  content   String     @db.Text
  userId    String
  channelId String
  reactions Reaction[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  channel   Channel    @relation(fields: [channelId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@index([channelId])
  @@index([userId])
}

model Reaction {
  id        String   @id @default(cuid())
  emoji     String
  userId    String
  messageId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, messageId, emoji])
  @@index([messageId])
}
